## Raw Affymetrix Microarray Data preprocessing and QC
## data:20151022
## data type: affymetrix microarray 
## experiment: lung cancer stem cell with and without caf
## weitinglin

＃set the working directory
setwd("/Users/jasonlin/Documents/2015 實驗室資料處理/201510 microarray/raw data CLSCLF")


#load the library

library(affy)
library(limma)
library(Biobase)
library(affyPLM)
library(affyQCReport)
library(simpleaffy)
library(latticeExtra)

#input the data(affy)
my_microarray <-ReadAffy()    #讀全部工作資料目錄下的cel檔
my_alternative_microarray<-ReadAffy(filenames=c("name_file")) #只讀工作目錄下特定檔案

ls()
my_microarray

|size of arrays=1164 * 1164 
|number of the samples = 9
|number of genes=54675
|annotation=hgu133plus2

#Some Function in the Affy
bgcorrect.methods()
normalize.AffyBatch.methods()

#Explore the Data
sample(my_microarray)
sampleNames(my_microarray)

#Construct the data name
#Group 1 = Cancer Stem Cell with Fibroblase 6th generation
#Group 2 = Cancer Stem Cell without Fibroblase 6th generation
#Group 3=  Cancer Stem Cell without Fibroblase on 3,8,14th generation
sampleID<-c("CLF_6_1","CLF_6_2","CLF_6_3","CLS_14","CLS_3","CLS_6_1","CLS_6_2","CLS_6_3","CLS_8")
rowname<-c("CLF_6_1","CLF_6_2","CLF_6_3","CLS_14","CLS_3","CLS_6_1","CLS_6_2","CLS_6_3","CLS_8")
Ex_group<-c(rep("Group.1",3),rep("Group.2",2),rep("Group.3",3),"Group.2")
MY_MICROARRAY<-data.frame(sampleID,Ex_group)
rownames(MY_MICROARRAY)<-rowname
protocolData(my_microarray)
#adjust the sample name 這步驟會修改phenoData和protocolData裡的sampleNames,沒有改的話，之後rma/gcrma會出現問題
sampleNames(my_microarray)<-sub("\\.CEL$","",sampleNames(my_microarray))


#Creat AnnotationDataFrame
vmd<-data.frame(labelDescription=c("SampleID","Experiment Group"))
phenoData(my_microarray)=new("AnnotatedDataFrame",data=MY_MICROARRAY,varMetadata=vmd)
phenoData(my_microarray)

#Quality Control
#load the library
library(affyQCReport)
library(simpleaffy)

#QC summary with "Simpleaffy"
#此函數重要參考網站：http://bioinformatics.picr.man.ac.uk/simpleaffy
＃裡頭有他適用的chip類型等等
saqc=qc(my_microarray)
plot(saqc)

#Heatmap with the function of "dist2/levelplot"
dd<-dist2(log2(exprs(my_microarray)))   #計算兩兩microarray表現的距離
#diag :Extract or replace the diagonal of a matrix, or construct a diagonal matrix.
diag(dd)=0
#hclust: Hierarchical cluster analysis on a set of dissimilarities and methods for analyzing it.
# the result was a list
dd.row<-as.dendrogram(hclust(as.dist(dd)))
row.ord<-order.dendrogram(dd.row)
legend<-list(top=list(fun=list(fun=dendrogramGrob,args=list(x=dd,side="stop"))))
levelplot(dd[row.ord, row.ord], scales=list(x=list(rot=90)),xlab="", ylab="", legend=legend)
#as.dendrogram:Class "dendrogram" provides general functions for handling tree-like structures. It is intended as a replacement for similar functions in hierarchical clustering and classification/regression trees, such that all of these can use the same engine for plotting or cutting trees.


# GAPDH 3' 5'~1, if the ratio >1.25, will be outlier <3 = blue, above red
# % present and average background
# a line to left=> down-scaling, right=> up-scaling


#Some Functionality from "Simpeaffy"
ratios(saqc)
avbg(saqc)
maxbg(saqc)
minbg(saqc)
spikeInProbes(saqc)
qcProbes(saqc)
percent.present(saqc)
sfs(saqc)
target(saqc)
ratios(saqc)

#Other way of QC
phenoData(my_microarray)
pData(my_microarray)
MAplot(my_microarray)
pm(my_microarray)

#load GCRMA #要在開始前還是後開始
library(gcrma)
my_microarray_gcrma<-gcrma(my_microarray)
my_microarray_exprs<-exprs(my_microarray)
dim(my_microarray_gcrma)

#get the expression data
e_microarray=exprs(my_microarray_gcrma)
e_microarray[1:4,1:4]
average_row<-rowMeans(e_microarray)

summary(e_microarray)                    
summary(my_microarray_exprs)      #基本描述行數值

pData(my_microarray_gcrma)



#Subset the array data
group1<-get.array.subset(my_microarray_gcrma,"Ex_group",c("Group.1"))
group2<-get.array.subset(my_microarray_gcrma,"Ex_group",c("Group.2"))
group3<-get.array.subset(my_microarray_gcrma,"Ex_group",c("Group.3"))
group1and3<-get.array.subset(my_microarray_gcrma,"Ex_group",c("Group.3","Group.1"))
CLF6_1toCLS6_1<-get.array.subset(my_microarray_gcrma,"sampleID",c("CLF_6_1","CLS_6_1"))
group1_batch<-get.array.subset(my_microarray,"Ex_group",c("Group.1"))
#Group.1 : CLF 6_1/2/3
#Group.2 : CLS 3/8/14
#Group.3 : CLS 6_1/2/3
sampleNames(group1and3)


#Ranking and Filtering probe sets use genefilter packages
source("https://bioconductor.org/biocLite.R")
biocLite("genefilter")
library(genefilter)
my_microarray_filter<-nsFilter(my_microarray_gcrma,remove.dupEntrez=FALSE,var.cutof=0.5)
class(my_microarray_filter)
my_microarray_filter


#use rowttests 來比較不同組別
group1and3e<-exprs(group1and3)
group_1_3=rowttests(group1and3,"Ex_group")
cls_clf_6_1_1=rowttests(CLF6_1toCLS6_1,"sampleID")
ggplot(cls_clf_6_1_1,aes(x=rank(rowMeans(cls_clf_6_1_1)),y=cls_clf_6_1_1$dm))+geom_point()
ggplot(cls_clf_6_1_1,aes(x=rowMeans(expression),y=cls_clf_6_1_1$dm))+geom_point()
expression<-exprs(CLF6_1toCLS6_1)
summary(expression)
library(ggplot2)
head(group_1_3)
head(rowMeans(group_1_3))
summary(rowMeans(group_1_3))
summary(group_1_3)
ggplot(group_1_3,aes(x=rowMeans(group1and3e),y=group_1_3$dm))+geom_point()
ggplot(group_1_3,aes(x=rank(rowMeans(group1and3e)),y=group_1_3$dm))+geom_point()


#Calculate the group 1
group1_expression<-call.exprs(group1_batch)
sort(abs(fc(group1_expression)),decreasing=TRUE)[1:100]
group1_expression

#Filtering the genes
results_group1_3<-pairwise.comparison(my_microarray_gcrma, "Ex_group",c("Group.1","Group.3"), spots=my_microarray )
Group_1_3_100<-sort(abs(fc(results_group1_3)),decreasing=TRUE)[1:100]
plot(results_group1_3,type="scatter")
plot(results_group1_3,type="scatter")
plot(results_group1_3,type="ma")
plot(results_group1_3,type="volcano")
?plot
Group_1_3_100_names<-names(Group_1_3_100)[1:100]
Group_1_3_100_names
#map the annotation from the 
source("http://bioconductor.org/biocLite.R")
biocLite("hgu133plus2.db")

library(hgu133plus2.db)

#explore the annotation database
hgu133plus2.db
ls("package:hgu133plus2.db")             #show what the database include inside

as.list(hgu133plus2ENTREZID[Group_1_3_100_names])
as.list(hgu133plus2GENENAME[Group_1_3_100_names])  # gene name
as.list(hgu133plus2OMIM[Group_1_3_100_names])
as.list(hgu133plus2UNIPROT[Group_1_3_100_names])
